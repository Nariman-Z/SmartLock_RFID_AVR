;/*******************************************************
;Project : RFID Lock with time and temp support
;Date    : 10 August 2024
;Author  : Nariman Ziaie
;Company : Islamic Azad University Central Tehran Branch
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Standard Input/Output functions
;#include <string.h>
;#include <stdio.h>
;
;// Declare your global variables here
;unsigned int temperature;
;char s[15];
;
;#define RFID_LENGTH 12
;char rfid[RFID_LENGTH + 1];  // Adjust size for RFID string +1 for null termination
;volatile unsigned char rfid_index = 0;
;volatile unsigned char rfid_complete = 0;
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE 0xC0
;
;#define TIMEOUT_THRESHOLD 5000  // Timeout threshold in milliseconds
;
;unsigned int read_adc(unsigned char adc_input) {
; 0000 0027 unsigned int read_adc(unsigned char adc_input) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0028     ADMUX = adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	adc_input -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0029     delay_us(10);
;PCODE: $00000014 VOL: 0
; 0000 002A     ADCSRA |= 0x40;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 002B     while ((ADCSRA & 0x10) == 0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002C     ADCSRA |= 0x10;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002D     return ADCW;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 002E }
;PCODE: $00000022 VOL: 0
;
;// Function to initialize USART
;void usart_init(unsigned int baud) {
; 0000 0031 void usart_init(unsigned int baud) {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0032     unsigned int UBR_val = (500000 / baud) - 1;
; 0000 0033     UCSRB = (1 << RXEN) | (1 << TXEN);  // Enable receiver and transmitter
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;	baud -> Y+2
;	UBR_val -> R16,R17
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0034     UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);  // 8 data bits, 1 stop bit
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0035     UBRRL = UBR_val;  // Set baud rate
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0036     UBRRH = (UBR_val >> 8);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0037 }
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;
;void usart_send_char(unsigned char ch) {
; 0000 0039 void usart_send_char(unsigned char ch) {
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 003A     while(!(UCSRA & (1<<UDRE)));
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;	ch -> R17
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 003B     UDR = ch;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 003C }
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;
;void usart_send_str(unsigned char *str) {
; 0000 003E void usart_send_str(unsigned char *str) {
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 003F     while(*str!='\0')
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;	*str -> R16,R17
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0040     {
; 0000 0041         while(!(UCSRA & (1<<UDRE)));
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0042         UDR = *str;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0043         str++;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0044     }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0045 }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;
;unsigned char usart_receive() {
; 0000 0047 unsigned char usart_receive() {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0048     while (!(UCSRA & (1 << RXC)));  // Wait for data to be received
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0049     return UDR;  // Return received data
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 004A }
;PCODE: $00000071 VOL: 0
;
;unsigned char usart_receive_string() {
; 0000 004C unsigned char usart_receive_string() {
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 004D     unsigned char i=0;
; 0000 004E     char str[13];
; 0000 004F     for(i=0;i<13;i++)
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;	i -> R17
;	str -> Y+1
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0050     {
; 0000 0051         str[i] = usart_receive();                // this will take in 12 digit RFID number
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0052     }
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0053     return *str;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0054 }
;PCODE: $00000093 VOL: 0
;
;void process_rfid(unsigned char ch) {
; 0000 0056 void process_rfid(unsigned char ch) {
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0057     if (rfid_index < RFID_LENGTH) {
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;	ch -> R17
;PCODE: $00000098 VOL: 1
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0058         rfid[rfid_index++] = ch;
;PCODE: $0000009B VOL: 1
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 1
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0059         if (rfid_index == RFID_LENGTH) {
;PCODE: $000000A2 VOL: 1
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 005A             rfid[RFID_LENGTH] = '\0';  // Null-terminate the string
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 005B             rfid_complete = 1;  // Mark the RFID as complete
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 1
; 0000 005C         }
; 0000 005D     } else {
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 005E         rfid_index = 0;  // Reset index if overflow
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 1
; 0000 005F     }
;PCODE: $000000AF VOL: 0
; 0000 0060 }
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;
;void reset_rfid() {
; 0000 0062 void reset_rfid() {
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0063     rfid_index = 0;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 1
; 0000 0064     rfid_complete = 0;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 1
; 0000 0065 }
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;
;interrupt [EXT_INT0] void ext_int0_isr(void) {
; 0000 0067 interrupt [2] void ext_int0_isr(void) {
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0068     unsigned long timeout_counter = 0;
; 0000 0069     unsigned char ch;
; 0000 006A 
; 0000 006B     lcd_clear();
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;	timeout_counter -> Y+1
;	ch -> R17
;PCODE: $000000C7 VOL: 0
; 0000 006C     lcd_gotoxy(0, 0);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 006D     lcd_puts("Scan RFID:");
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 006E     printf("Please Scan your RFID TAG: \n");
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 006F 
; 0000 0070     reset_rfid();  // Reset RFID status
;PCODE: $000000D6 VOL: 0
; 0000 0071 
; 0000 0072     while (timeout_counter < TIMEOUT_THRESHOLD) {
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0073         if (UCSRA & (1 << RXC)) {  // Check if data received
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0074             ch = usart_receive();
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0075             process_rfid(ch);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0076             timeout_counter = 0;  // Reset timeout if data is received
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0077         }
; 0000 0078 
; 0000 0079         if (rfid_complete) {
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 1
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 007A             lcd_clear();
;PCODE: $000000E8 VOL: 0
; 0000 007B             if (strncmp(rfid, "160066A5EC39", RFID_LENGTH) == 0) {  // Compare RFID with predefined ID
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 007C                 lcd_gotoxy(0, 0);
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 007D                 lcd_puts("Valid Card");
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 007E                 lcd_gotoxy(0,1);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 007F                 lcd_puts("Door unlocked");
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0080                 printf("The Card is VALID, Door will be unlocked. \n");
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0081                 PORTB |= (1 << 0);  // Turn on LED or relay
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0082                 delay_ms(5000);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0083                 PORTB &= ~(1 << 0);  // Turn off LED or relay
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0084             } else {
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0085                 lcd_gotoxy(0, 0);
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0086                 lcd_puts("Invalid Card");
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0087                 lcd_gotoxy(0,1);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0088                 lcd_puts("Door locked");
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0089                 printf("The Card is INVALID, Door remains locked. \n");
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 008A                 PORTB &= ~(1 << 0);  // Turn off LED or relay
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 008B             }
;PCODE: $00000126 VOL: 0
; 0000 008C             delay_ms(1000);  // Hold the result on the screen for 1 second
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 008D             break;  // Exit the RFID scan mode
;PCODE: $00000129 VOL: 0
; 0000 008E         }
; 0000 008F 
; 0000 0090         delay_ms(1);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0091         timeout_counter++;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0092     }
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0093 
; 0000 0094     lcd_clear();  // Clear the LCD after timeout or valid/invalid card check
;PCODE: $00000133 VOL: 0
; 0000 0095 }
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0

	.DSEG
_0x18:
	.BYTE 0x4A
;
;void main(void) {
; 0000 0097 void main(void) {

	.CSEG
;PCODE: $0000013A VOL: 0
; 0000 0098     // Declare your local variables here
; 0000 0099     char seconds = 0, minutes = 0, hours = 0, A[16];
; 0000 009A 
; 0000 009B     // Initialize Ports
; 0000 009C     // Port A initialization
; 0000 009D     DDRA  = 0x00;
;PCODE: $0000013B VOL: 0
;	seconds -> R17
;	minutes -> R16
;	hours -> R19
;	A -> Y+0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 009E     PORTA = 0x00;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 009F 
; 0000 00A0     // Port B initialization
; 0000 00A1     DDRB  = 0x01;  // Set PORTB.0 as output (for LED/Relay control)
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00A2     PORTB = 0x00;  // Initialize PORTB to low
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00A3 
; 0000 00A4     // Port C initialization
; 0000 00A5     DDRC = 0xF7;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00A6 
; 0000 00A7     // Initialize other ports (if needed)
; 0000 00A8 
; 0000 00A9     // ADC initialization
; 0000 00AA     // ADC Clock frequency: 1000.000 kHz
; 0000 00AB     // ADC Voltage Reference: AREF pin
; 0000 00AC     // ADC Auto Trigger Source: ADC Stopped
; 0000 00AD     ADMUX = ADC_VREF_TYPE & 0xff;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00AE     ADCSRA = 0x83;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00AF     // SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
; 0000 00B0 
; 0000 00B1     // Alphanumeric LCD initialization
; 0000 00B2     // Connections are specified in the
; 0000 00B3     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00B4     // RS - PORTC Bit 0
; 0000 00B5     // RD - PORTC Bit 1
; 0000 00B6     // EN - PORTC Bit 2
; 0000 00B7     // D4 - PORTC Bit 4
; 0000 00B8     // D5 - PORTC Bit 5
; 0000 00B9     // D6 - PORTC Bit 6
; 0000 00BA     // D7 - PORTC Bit 7
; 0000 00BB     // Characters/line: 16
; 0000 00BC     lcd_init(16);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00BD     lcd_clear();
;PCODE: $00000152 VOL: 0
; 0000 00BE 
; 0000 00BF     // Initialize USART for RFID communication (9600 baud rate)
; 0000 00C0     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00C1     // USART Receiver: On
; 0000 00C2     // USART Transmitter: On
; 0000 00C3     // USART Mode: Asynchronous
; 0000 00C4     // USART Baud Rate: 9600
; 0000 00C5     usart_init(9600);
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00C6 
; 0000 00C7     // Initialize external interrupt on INT0 (PD2)
; 0000 00C8     // INT0: On
; 0000 00C9     // INT0 Mode: Falling Edge
; 0000 00CA     GICR |= (1 << INT0);  // Enable INT0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00CB     MCUCR |= (1 << ISC01);  // Trigger INT0 on falling edge
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00CC     GIFR |= (1 << INTF0);  // Clear INT0 interrupt flag
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00CD 
; 0000 00CE     // Enable global interrupts
; 0000 00CF     #asm("sei");
;PCODE: $0000015E VOL: 0
; 0000 00D0 
; 0000 00D1     lcd_gotoxy(0,0);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00D2     lcd_puts("Developed by:");
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00D3     lcd_gotoxy(0,1);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 00D4     lcd_puts("Nariman Ziaie");
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00D5     delay_ms(1000);
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00D6 
; 0000 00D7     while (1) {
;PCODE: $0000016F VOL: 0
; 0000 00D8         // Update time
; 0000 00D9         seconds++;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00DA         if (seconds > 59) {
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00DB             seconds = 0;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00DC             minutes++;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00DD         }
; 0000 00DE         if (minutes > 59) {
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 00DF             minutes = 0;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00E0             hours++;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00E1         }
; 0000 00E2         if (hours > 23) {
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 00E3             hours = minutes = seconds = 0;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00E4         }
; 0000 00E5 
; 0000 00E6         // Display time on the LCD
; 0000 00E7         sprintf(A, "Time: %02u:%02u:%02u ", hours, minutes, seconds);
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 00E8         lcd_gotoxy(0, 0);
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 00E9         lcd_puts(A);
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 00EA 
; 0000 00EB         // Read temperature and display it
; 0000 00EC         temperature = read_adc(0);
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 00ED         sprintf(s, "Actual Temp=%u", temperature / 4);
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 00EE         lcd_gotoxy(0, 1);
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 00EF         lcd_puts(s);
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 00F0 
; 0000 00F1         delay_ms(1000);  // Update time and temp every second
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 00F2     }
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 00F3 }
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0

	.DSEG
_0x20:
	.BYTE 0x1C
