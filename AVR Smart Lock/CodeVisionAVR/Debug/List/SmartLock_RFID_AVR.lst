
AVRASM ver. 2.1.30  C:\Users\narim\Documents\GitHub\SmartLock_RFID_AVR\AVR Smart Lock\CodeVisionAVR\Debug\List\SmartLock_RFID_AVR.asm Sat Aug 10 18:06:15 2024

C:\Users\narim\Documents\GitHub\SmartLock_RFID_AVR\AVR Smart Lock\CodeVisionAVR\Debug\List\SmartLock_RFID_AVR.asm(1095): warning: Register r4 already defined by the .DEF directive
C:\Users\narim\Documents\GitHub\SmartLock_RFID_AVR\AVR Smart Lock\CodeVisionAVR\Debug\List\SmartLock_RFID_AVR.asm(1096): warning: Register r5 already defined by the .DEF directive
C:\Users\narim\Documents\GitHub\SmartLock_RFID_AVR\AVR Smart Lock\CodeVisionAVR\Debug\List\SmartLock_RFID_AVR.asm(1097): warning: Register r7 already defined by the .DEF directive
C:\Users\narim\Documents\GitHub\SmartLock_RFID_AVR\AVR Smart Lock\CodeVisionAVR\Debug\List\SmartLock_RFID_AVR.asm(1098): warning: Register r6 already defined by the .DEF directive
C:\Users\narim\Documents\GitHub\SmartLock_RFID_AVR\AVR Smart Lock\CodeVisionAVR\Debug\List\SmartLock_RFID_AVR.asm(1099): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.37 Evaluation
                 ;(C) Copyright 1998-2019 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _temperature=R4
                 	.DEF _temperature_msb=R5
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00d0 	JMP  __RESET
000002 940c 014f 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 6353
000034 6e61
000035 5220
000036 4946      	.DB  0x53,0x63,0x61,0x6E,0x20,0x52,0x46,0x49
000037 3a44
000038 5000
000039 656c
00003a 7361      	.DB  0x44,0x3A,0x0,0x50,0x6C,0x65,0x61,0x73
00003b 2065
00003c 6353
00003d 6e61
00003e 7920      	.DB  0x65,0x20,0x53,0x63,0x61,0x6E,0x20,0x79
00003f 756f
000040 2072
000041 4652
000042 4449      	.DB  0x6F,0x75,0x72,0x20,0x52,0x46,0x49,0x44
000043 5420
000044 4741
000045 203a
000046 000a      	.DB  0x20,0x54,0x41,0x47,0x3A,0x20,0xA,0x0
000047 3631
000048 3030
000049 3636
00004a 3541      	.DB  0x31,0x36,0x30,0x30,0x36,0x36,0x41,0x35
00004b 4345
00004c 3933
00004d 5600
00004e 6c61      	.DB  0x45,0x43,0x33,0x39,0x0,0x56,0x61,0x6C
00004f 6469
000050 4320
000051 7261
000052 0064      	.DB  0x69,0x64,0x20,0x43,0x61,0x72,0x64,0x0
000053 6f44
000054 726f
000055 7520
000056 6c6e      	.DB  0x44,0x6F,0x6F,0x72,0x20,0x75,0x6E,0x6C
000057 636f
000058 656b
000059 0064
00005a 6854      	.DB  0x6F,0x63,0x6B,0x65,0x64,0x0,0x54,0x68
00005b 2065
00005c 6143
00005d 6472
00005e 6920      	.DB  0x65,0x20,0x43,0x61,0x72,0x64,0x20,0x69
00005f 2073
000060 4156
000061 494c
000062 2c44      	.DB  0x73,0x20,0x56,0x41,0x4C,0x49,0x44,0x2C
000063 4420
000064 6f6f
000065 2072
000066 6977      	.DB  0x20,0x44,0x6F,0x6F,0x72,0x20,0x77,0x69
000067 6c6c
000068 6220
000069 2065
00006a 6e75      	.DB  0x6C,0x6C,0x20,0x62,0x65,0x20,0x75,0x6E
00006b 6f6c
00006c 6b63
00006d 6465
00006e 202e      	.DB  0x6C,0x6F,0x63,0x6B,0x65,0x64,0x2E,0x20
00006f 000a
000070 6e49
000071 6176
000072 696c      	.DB  0xA,0x0,0x49,0x6E,0x76,0x61,0x6C,0x69
000073 2064
000074 6143
000075 6472
000076 4400      	.DB  0x64,0x20,0x43,0x61,0x72,0x64,0x0,0x44
000077 6f6f
000078 2072
000079 6f6c
00007a 6b63      	.DB  0x6F,0x6F,0x72,0x20,0x6C,0x6F,0x63,0x6B
00007b 6465
00007c 5400
00007d 6568
00007e 4320      	.DB  0x65,0x64,0x0,0x54,0x68,0x65,0x20,0x43
00007f 7261
000080 2064
000081 7369
000082 4920      	.DB  0x61,0x72,0x64,0x20,0x69,0x73,0x20,0x49
000083 564e
000084 4c41
000085 4449
000086 202c      	.DB  0x4E,0x56,0x41,0x4C,0x49,0x44,0x2C,0x20
000087 6f44
000088 726f
000089 7220
00008a 6d65      	.DB  0x44,0x6F,0x6F,0x72,0x20,0x72,0x65,0x6D
00008b 6961
00008c 736e
00008d 6c20
00008e 636f      	.DB  0x61,0x69,0x6E,0x73,0x20,0x6C,0x6F,0x63
00008f 656b
000090 2e64
000091 0a20
000092 4400      	.DB  0x6B,0x65,0x64,0x2E,0x20,0xA,0x0,0x44
000093 7665
000094 6c65
000095 706f
000096 6465      	.DB  0x65,0x76,0x65,0x6C,0x6F,0x70,0x65,0x64
000097 6220
000098 3a79
000099 4e00
00009a 7261      	.DB  0x20,0x62,0x79,0x3A,0x0,0x4E,0x61,0x72
00009b 6d69
00009c 6e61
00009d 5a20
00009e 6169      	.DB  0x69,0x6D,0x61,0x6E,0x20,0x5A,0x69,0x61
00009f 6569
0000a0 5400
0000a1 6d69
0000a2 3a65      	.DB  0x69,0x65,0x0,0x54,0x69,0x6D,0x65,0x3A
0000a3 2520
0000a4 3230
0000a5 3a75
0000a6 3025      	.DB  0x20,0x25,0x30,0x32,0x75,0x3A,0x25,0x30
0000a7 7532
0000a8 253a
0000a9 3230
0000aa 2075      	.DB  0x32,0x75,0x3A,0x25,0x30,0x32,0x75,0x20
0000ab 4100
0000ac 7463
0000ad 6175
0000ae 206c      	.DB  0x0,0x41,0x63,0x74,0x75,0x61,0x6C,0x20
0000af 6554
0000b0 706d
0000b1 253d
0000b2 0075      	.DB  0x54,0x65,0x6D,0x70,0x3D,0x25,0x75,0x0
                 _0x2000003:
0000b3 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000b4 000b      	.DW  0x0B
0000b5 0260      	.DW  _0x18
0000b6 0066      	.DW  _0x0*2
                 
0000b7 000d      	.DW  0x0D
0000b8 026b      	.DW  _0x18+11
0000b9 008e      	.DW  _0x0*2+40
                 
0000ba 000b      	.DW  0x0B
0000bb 0278      	.DW  _0x18+24
0000bc 009b      	.DW  _0x0*2+53
                 
0000bd 000e      	.DW  0x0E
0000be 0283      	.DW  _0x18+35
0000bf 00a6      	.DW  _0x0*2+64
                 
0000c0 000d      	.DW  0x0D
0000c1 0291      	.DW  _0x18+49
0000c2 00e0      	.DW  _0x0*2+122
                 
0000c3 000c      	.DW  0x0C
0000c4 029e      	.DW  _0x18+62
0000c5 00ed      	.DW  _0x0*2+135
                 
0000c6 000e      	.DW  0x0E
0000c7 02aa      	.DW  _0x20
0000c8 0125      	.DW  _0x0*2+191
                 
0000c9 000e      	.DW  0x0E
0000ca 02b8      	.DW  _0x20+14
0000cb 0133      	.DW  _0x0*2+205
                 
0000cc 0002      	.DW  0x02
0000cd 02e4      	.DW  __base_y_G100
0000ce 0166      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
0000cf 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000d0 94f8      	CLI
0000d1 27ee      	CLR  R30
0000d2 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000d3 e0f1      	LDI  R31,1
0000d4 bffb      	OUT  GICR,R31
0000d5 bfeb      	OUT  GICR,R30
0000d6 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000d7 e08d      	LDI  R24,(14-2)+1
0000d8 e0a2      	LDI  R26,2
0000d9 27bb      	CLR  R27
                 __CLEAR_REG:
0000da 93ed      	ST   X+,R30
0000db 958a      	DEC  R24
0000dc f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000dd e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000de e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000df e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000e0 93ed      	ST   X+,R30
0000e1 9701      	SBIW R24,1
0000e2 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000e3 e6e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000e4 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000e5 9185      	LPM  R24,Z+
0000e6 9195      	LPM  R25,Z+
0000e7 9700      	SBIW R24,0
0000e8 f061      	BREQ __GLOBAL_INI_END
0000e9 91a5      	LPM  R26,Z+
0000ea 91b5      	LPM  R27,Z+
0000eb 9005      	LPM  R0,Z+
0000ec 9015      	LPM  R1,Z+
0000ed 01bf      	MOVW R22,R30
0000ee 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000ef 9005      	LPM  R0,Z+
0000f0 920d      	ST   X+,R0
0000f1 9701      	SBIW R24,1
0000f2 f7e1      	BRNE __GLOBAL_INI_LOOP
0000f3 01fb      	MOVW R30,R22
0000f4 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000f5 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000f6 bfed      	OUT  SPL,R30
0000f7 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000f8 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000f9 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000fa e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000fb 940c 01d4 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;Project : RFID Lock with time and temp support
                 ;Date    : 10 August 2024
                 ;Author  : Nariman Ziaie
                 ;Company : Islamic Azad University Central Tehran Branch
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Standard Input/Output functions
                 ;#include <string.h>
                 ;#include <stdio.h>
                 ;
                 ;// Declare your global variables here
                 ;unsigned int temperature;
                 ;char s[15];
                 ;
                 ;#define RFID_LENGTH 12
                 ;char rfid[RFID_LENGTH + 1];  // Adjust size for RFID string +1 for null termination
                 ;volatile unsigned char rfid_index = 0;
                 ;volatile unsigned char rfid_complete = 0;
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE 0xC0
                 ;
                 ;#define TIMEOUT_THRESHOLD 5000  // Timeout threshold in milliseconds
                 ;
                 ;unsigned int read_adc(unsigned char adc_input) {
                 ; 0000 0027 unsigned int read_adc(unsigned char adc_input) {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0028     ADMUX = adc_input | (ADC_VREF_TYPE & 0xff);
0000fd 931a      	ST   -Y,R17
0000fe 2f1a      	MOV  R17,R26
                 ;	adc_input -> R17
0000ff 2fe1      	MOV  R30,R17
000100 6ce0      	ORI  R30,LOW(0xC0)
000101 b9e7      	OUT  0x7,R30
                 ; 0000 0029     delay_us(10);
                +
000102 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000103 958a     +DEC R24
000104 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 002A     ADCSRA |= 0x40;
000105 9a36      	SBI  0x6,6
                 ; 0000 002B     while ((ADCSRA & 0x10) == 0);
                 _0x3:
000106 9b34      	SBIS 0x6,4
000107 cffe      	RJMP _0x3
                 ; 0000 002C     ADCSRA |= 0x10;
000108 9a34      	SBI  0x6,4
                 ; 0000 002D     return ADCW;
000109 b1e4      	IN   R30,0x4
00010a b1f5      	IN   R31,0x4+1
00010b c1b7      	RJMP _0x2080003
                 ; 0000 002E }
                 ; .FEND
                 ;
                 ;// Function to initialize USART
                 ;void usart_init(unsigned int baud) {
                 ; 0000 0031 void usart_init(unsigned int baud) {
                 _usart_init:
                 ; .FSTART _usart_init
                 ; 0000 0032     unsigned int UBR_val = (500000 / baud) - 1;
                 ; 0000 0033     UCSRB = (1 << RXEN) | (1 << TXEN);  // Enable receiver and transmitter
00010c 93ba      	ST   -Y,R27
00010d 93aa      	ST   -Y,R26
00010e 931a      	ST   -Y,R17
00010f 930a      	ST   -Y,R16
                 ;	baud -> Y+2
                 ;	UBR_val -> R16,R17
000110 81ea      	LDD  R30,Y+2
000111 81fb      	LDD  R31,Y+2+1
000112 2766      	CLR  R22
000113 2777      	CLR  R23
                +
000114 e2a0     +LDI R26 , LOW ( 0x7A120 )
000115 eab1     +LDI R27 , HIGH ( 0x7A120 )
000116 e087     +LDI R24 , BYTE3 ( 0x7A120 )
000117 e090     +LDI R25 , BYTE4 ( 0x7A120 )
                 	__GETD2N 0x7A120
000118 d429      	RCALL __DIVD21
000119 9731      	SBIW R30,1
00011a 018f      	MOVW R16,R30
00011b e1e8      	LDI  R30,LOW(24)
00011c b9ea      	OUT  0xA,R30
                 ; 0000 0034     UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);  // 8 data bits, 1 stop bit
00011d e8e6      	LDI  R30,LOW(134)
00011e bde0      	OUT  0x20,R30
                 ; 0000 0035     UBRRL = UBR_val;  // Set baud rate
00011f b909      	OUT  0x9,R16
                 ; 0000 0036     UBRRH = (UBR_val >> 8);
000120 2fe1      	MOV  R30,R17
000121 70f0      	ANDI R31,HIGH(0x0)
000122 bde0      	OUT  0x20,R30
                 ; 0000 0037 }
000123 8119      	LDD  R17,Y+1
000124 8108      	LDD  R16,Y+0
000125 c172      	RJMP _0x2080004
                 ; .FEND
                 ;
                 ;void usart_send_char(unsigned char ch) {
                 ; 0000 0039 void usart_send_char(unsigned char ch) {
                 ; 0000 003A     while(!(UCSRA & (1<<UDRE)));
                 ;	ch -> R17
                 ; 0000 003B     UDR = ch;
                 ; 0000 003C }
                 ;
                 ;void usart_send_str(unsigned char *str) {
                 ; 0000 003E void usart_send_str(unsigned char *str) {
                 ; 0000 003F     while(*str!='\0')
                 ;	*str -> R16,R17
                 ; 0000 0040     {
                 ; 0000 0041         while(!(UCSRA & (1<<UDRE)));
                 ; 0000 0042         UDR = *str;
                 ; 0000 0043         str++;
                 ; 0000 0044     }
                 ; 0000 0045 }
                 ;
                 ;unsigned char usart_receive() {
                 ; 0000 0047 unsigned char usart_receive() {
                 _usart_receive:
                 ; .FSTART _usart_receive
                 ; 0000 0048     while (!(UCSRA & (1 << RXC)));  // Wait for data to be received
                 _0xF:
000126 9b5f      	SBIS 0xB,7
000127 cffe      	RJMP _0xF
                 ; 0000 0049     return UDR;  // Return received data
000128 b1ec      	IN   R30,0xC
000129 9508      	RET
                 ; 0000 004A }
                 ; .FEND
                 ;
                 ;unsigned char usart_receive_string() {
                 ; 0000 004C unsigned char usart_receive_string() {
                 ; 0000 004D     unsigned char i=0;
                 ; 0000 004E     char str[13];
                 ; 0000 004F     for(i=0;i<13;i++)
                 ;	i -> R17
                 ;	str -> Y+1
                 ; 0000 0050     {
                 ; 0000 0051         str[i] = usart_receive();                // this will take in 12 digit RFID number
                 ; 0000 0052     }
                 ; 0000 0053     return *str;
                 ; 0000 0054 }
                 ;
                 ;void process_rfid(unsigned char ch) {
                 ; 0000 0056 void process_rfid(unsigned char ch) {
                 _process_rfid:
                 ; .FSTART _process_rfid
                 ; 0000 0057     if (rfid_index < RFID_LENGTH) {
00012a 931a      	ST   -Y,R17
00012b 2f1a      	MOV  R17,R26
                 ;	ch -> R17
00012c 91a0 02e2 	LDS  R26,_rfid_index
00012e 30ac      	CPI  R26,LOW(0xC)
00012f f4a8      	BRSH _0x15
                 ; 0000 0058         rfid[rfid_index++] = ch;
000130 91e0 02e2 	LDS  R30,_rfid_index
000132 5fef      	SUBI R30,-LOW(1)
000133 93e0 02e2 	STS  _rfid_index,R30
000135 50e1      	SUBI R30,LOW(1)
000136 e0f0      	LDI  R31,0
000137 52eb      	SUBI R30,LOW(-_rfid)
000138 4ffd      	SBCI R31,HIGH(-_rfid)
000139 8310      	ST   Z,R17
                 ; 0000 0059         if (rfid_index == RFID_LENGTH) {
00013a 91a0 02e2 	LDS  R26,_rfid_index
00013c 30ac      	CPI  R26,LOW(0xC)
00013d f431      	BRNE _0x16
                 ; 0000 005A             rfid[RFID_LENGTH] = '\0';  // Null-terminate the string
00013e e0e0      	LDI  R30,LOW(0)
                +
00013f 93e0 02e1+STS _rfid + ( 12 ) , R30
                 	__PUTB1MN _rfid,12
                 ; 0000 005B             rfid_complete = 1;  // Mark the RFID as complete
000141 e0e1      	LDI  R30,LOW(1)
000142 93e0 02e3 	STS  _rfid_complete,R30
                 ; 0000 005C         }
                 ; 0000 005D     } else {
                 _0x16:
000144 c003      	RJMP _0x17
                 _0x15:
                 ; 0000 005E         rfid_index = 0;  // Reset index if overflow
000145 e0e0      	LDI  R30,LOW(0)
000146 93e0 02e2 	STS  _rfid_index,R30
                 ; 0000 005F     }
                 _0x17:
                 ; 0000 0060 }
000148 c17a      	RJMP _0x2080003
                 ; .FEND
                 ;
                 ;void reset_rfid() {
                 ; 0000 0062 void reset_rfid() {
                 _reset_rfid:
                 ; .FSTART _reset_rfid
                 ; 0000 0063     rfid_index = 0;
000149 e0e0      	LDI  R30,LOW(0)
00014a 93e0 02e2 	STS  _rfid_index,R30
                 ; 0000 0064     rfid_complete = 0;
00014c 93e0 02e3 	STS  _rfid_complete,R30
                 ; 0000 0065 }
00014e 9508      	RET
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void) {
                 ; 0000 0067 interrupt [2] void ext_int0_isr(void) {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00014f 920a      	ST   -Y,R0
000150 921a      	ST   -Y,R1
000151 92fa      	ST   -Y,R15
000152 936a      	ST   -Y,R22
000153 937a      	ST   -Y,R23
000154 938a      	ST   -Y,R24
000155 939a      	ST   -Y,R25
000156 93aa      	ST   -Y,R26
000157 93ba      	ST   -Y,R27
000158 93ea      	ST   -Y,R30
000159 93fa      	ST   -Y,R31
00015a b7ef      	IN   R30,SREG
00015b 93ea      	ST   -Y,R30
                 ; 0000 0068     unsigned long timeout_counter = 0;
                 ; 0000 0069     unsigned char ch;
                 ; 0000 006A 
                 ; 0000 006B     lcd_clear();
00015c 9724      	SBIW R28,4
00015d e0e0      	LDI  R30,LOW(0)
00015e 83e8      	ST   Y,R30
00015f 83e9      	STD  Y+1,R30
000160 83ea      	STD  Y+2,R30
000161 83eb      	STD  Y+3,R30
000162 931a      	ST   -Y,R17
                 ;	timeout_counter -> Y+1
                 ;	ch -> R17
000163 d10a      	RCALL _lcd_clear
                 ; 0000 006C     lcd_gotoxy(0, 0);
000164 d33c      	RCALL SUBOPT_0x0
                 ; 0000 006D     lcd_puts("Scan RFID:");
                +
000165 e6a0     +LDI R26 , LOW ( _0x18 + ( 0 ) )
000166 e0b2     +LDI R27 , HIGH ( _0x18 + ( 0 ) )
                 	__POINTW2MN _0x18,0
000167 d123      	RCALL _lcd_puts
                 ; 0000 006E     printf("Please Scan your RFID TAG: \n");
                +
000168 e7e1     +LDI R30 , LOW ( 2 * _0x0 + ( 11 ) )
000169 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 11 ) )
                 	__POINTW1FN _0x0,11
00016a d33a      	RCALL SUBOPT_0x1
                 ; 0000 006F 
                 ; 0000 0070     reset_rfid();  // Reset RFID status
00016b dfdd      	RCALL _reset_rfid
                 ; 0000 0071 
                 ; 0000 0072     while (timeout_counter < TIMEOUT_THRESHOLD) {
                 _0x19:
                +
00016c 81a9     +LDD R26 , Y + 1
00016d 81ba     +LDD R27 , Y + 1 + 1
00016e 818b     +LDD R24 , Y + 1 + 2
00016f 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
                +
000170 38a8     +CPI R26 , LOW ( 0x1388 )
000171 e1e3     +LDI R30 , HIGH ( 0x1388 )
000172 07be     +CPC R27 , R30
000173 e0e0     +LDI R30 , BYTE3 ( 0x1388 )
000174 078e     +CPC R24 , R30
000175 e0e0     +LDI R30 , BYTE4 ( 0x1388 )
000176 079e     +CPC R25 , R30
                 	__CPD2N 0x1388
000177 f008      	BRLO PC+2
000178 c04a      	RJMP _0x1B
                 ; 0000 0073         if (UCSRA & (1 << RXC)) {  // Check if data received
000179 9b5f      	SBIS 0xB,7
00017a c009      	RJMP _0x1C
                 ; 0000 0074             ch = usart_receive();
00017b dfaa      	RCALL _usart_receive
00017c 2f1e      	MOV  R17,R30
                 ; 0000 0075             process_rfid(ch);
00017d 2fa1      	MOV  R26,R17
00017e dfab      	RCALL _process_rfid
                 ; 0000 0076             timeout_counter = 0;  // Reset timeout if data is received
00017f e0e0      	LDI  R30,LOW(0)
                +
000180 83e9     +STD Y + 1 , R30
000181 83ea     +STD Y + 1 + 1 , R30
000182 83eb     +STD Y + 1 + 2 , R30
000183 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
                 ; 0000 0077         }
                 ; 0000 0078 
                 ; 0000 0079         if (rfid_complete) {
                 _0x1C:
000184 91e0 02e3 	LDS  R30,_rfid_complete
000186 30e0      	CPI  R30,0
000187 f159      	BREQ _0x1D
                 ; 0000 007A             lcd_clear();
000188 d0e5      	RCALL _lcd_clear
                 ; 0000 007B             if (strncmp(rfid, "160066A5EC39", RFID_LENGTH) == 0) {  // Compare RFID with predefined ID
000189 ede5      	LDI  R30,LOW(_rfid)
00018a e0f2      	LDI  R31,HIGH(_rfid)
00018b 93fa      	ST   -Y,R31
00018c 93ea      	ST   -Y,R30
                +
00018d e6eb     +LDI R30 , LOW ( _0x18 + ( 11 ) )
00018e e0f2     +LDI R31 , HIGH ( _0x18 + ( 11 ) )
                 	__POINTW1MN _0x18,11
00018f 93fa      	ST   -Y,R31
000190 93ea      	ST   -Y,R30
000191 e0ac      	LDI  R26,LOW(12)
000192 d14b      	RCALL _strncmp
000193 30e0      	CPI  R30,0
000194 f479      	BRNE _0x1E
                 ; 0000 007C                 lcd_gotoxy(0, 0);
000195 d30b      	RCALL SUBOPT_0x0
                 ; 0000 007D                 lcd_puts("Valid Card");
                +
000196 e7a8     +LDI R26 , LOW ( _0x18 + ( 24 ) )
000197 e0b2     +LDI R27 , HIGH ( _0x18 + ( 24 ) )
                 	__POINTW2MN _0x18,24
000198 d312      	RCALL SUBOPT_0x2
                 ; 0000 007E                 lcd_gotoxy(0,1);
                 ; 0000 007F                 lcd_puts("Door unlocked");
                +
000199 e8a3     +LDI R26 , LOW ( _0x18 + ( 35 ) )
00019a e0b2     +LDI R27 , HIGH ( _0x18 + ( 35 ) )
                 	__POINTW2MN _0x18,35
00019b d0ef      	RCALL _lcd_puts
                 ; 0000 0080                 printf("The Card is VALID, Door will be unlocked. \n");
                +
00019c ebe4     +LDI R30 , LOW ( 2 * _0x0 + ( 78 ) )
00019d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 78 ) )
                 	__POINTW1FN _0x0,78
00019e d306      	RCALL SUBOPT_0x1
                 ; 0000 0081                 PORTB |= (1 << 0);  // Turn on LED or relay
00019f 9ac0      	SBI  0x18,0
                 ; 0000 0082                 delay_ms(5000);
0001a0 e8a8      	LDI  R26,LOW(5000)
0001a1 e1b3      	LDI  R27,HIGH(5000)
0001a2 d3bd      	RCALL _delay_ms
                 ; 0000 0083                 PORTB &= ~(1 << 0);  // Turn off LED or relay
0001a3 c00a      	RJMP _0x28
                 ; 0000 0084             } else {
                 _0x1E:
                 ; 0000 0085                 lcd_gotoxy(0, 0);
0001a4 d2fc      	RCALL SUBOPT_0x0
                 ; 0000 0086                 lcd_puts("Invalid Card");
                +
0001a5 e9a1     +LDI R26 , LOW ( _0x18 + ( 49 ) )
0001a6 e0b2     +LDI R27 , HIGH ( _0x18 + ( 49 ) )
                 	__POINTW2MN _0x18,49
0001a7 d303      	RCALL SUBOPT_0x2
                 ; 0000 0087                 lcd_gotoxy(0,1);
                 ; 0000 0088                 lcd_puts("Door locked");
                +
0001a8 e9ae     +LDI R26 , LOW ( _0x18 + ( 62 ) )
0001a9 e0b2     +LDI R27 , HIGH ( _0x18 + ( 62 ) )
                 	__POINTW2MN _0x18,62
0001aa d0e0      	RCALL _lcd_puts
                 ; 0000 0089                 printf("The Card is INVALID, Door remains locked. \n");
                +
0001ab efe9     +LDI R30 , LOW ( 2 * _0x0 + ( 147 ) )
0001ac e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 147 ) )
                 	__POINTW1FN _0x0,147
0001ad d2f7      	RCALL SUBOPT_0x1
                 ; 0000 008A                 PORTB &= ~(1 << 0);  // Turn off LED or relay
                 _0x28:
0001ae 98c0      	CBI  0x18,0
                 ; 0000 008B             }
                 ; 0000 008C             delay_ms(1000);  // Hold the result on the screen for 1 second
0001af eea8      	LDI  R26,LOW(1000)
0001b0 e0b3      	LDI  R27,HIGH(1000)
0001b1 d3ae      	RCALL _delay_ms
                 ; 0000 008D             break;  // Exit the RFID scan mode
0001b2 c010      	RJMP _0x1B
                 ; 0000 008E         }
                 ; 0000 008F 
                 ; 0000 0090         delay_ms(1);
                 _0x1D:
0001b3 e0a1      	LDI  R26,LOW(1)
0001b4 e0b0      	LDI  R27,0
0001b5 d3aa      	RCALL _delay_ms
                 ; 0000 0091         timeout_counter++;
                +
0001b6 81e9     +LDD R30 , Y + 1
0001b7 81fa     +LDD R31 , Y + 1 + 1
0001b8 816b     +LDD R22 , Y + 1 + 2
0001b9 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
                +
0001ba 5fef     +SUBI R30 , LOW ( - 1 )
0001bb 4fff     +SBCI R31 , HIGH ( - 1 )
0001bc 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0001bd 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
0001be 83e9     +STD Y + 1 , R30
0001bf 83fa     +STD Y + 1 + 1 , R31
0001c0 836b     +STD Y + 1 + 2 , R22
0001c1 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0000 0092     }
0001c2 cfa9      	RJMP _0x19
                 _0x1B:
                 ; 0000 0093 
                 ; 0000 0094     lcd_clear();  // Clear the LCD after timeout or valid/invalid card check
0001c3 d0aa      	RCALL _lcd_clear
                 ; 0000 0095 }
0001c4 8118      	LDD  R17,Y+0
0001c5 9625      	ADIW R28,5
0001c6 91e9      	LD   R30,Y+
0001c7 bfef      	OUT  SREG,R30
0001c8 91f9      	LD   R31,Y+
0001c9 91e9      	LD   R30,Y+
0001ca 91b9      	LD   R27,Y+
0001cb 91a9      	LD   R26,Y+
0001cc 9199      	LD   R25,Y+
0001cd 9189      	LD   R24,Y+
0001ce 9179      	LD   R23,Y+
0001cf 9169      	LD   R22,Y+
0001d0 90f9      	LD   R15,Y+
0001d1 9019      	LD   R1,Y+
0001d2 9009      	LD   R0,Y+
0001d3 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x18:
000260           	.BYTE 0x4A
                 ;
                 ;void main(void) {
                 ; 0000 0097 void main(void) {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0098     // Declare your local variables here
                 ; 0000 0099     char seconds = 0, minutes = 0, hours = 0, A[16];
                 ; 0000 009A 
                 ; 0000 009B     // Initialize Ports
                 ; 0000 009C     // Port A initialization
                 ; 0000 009D     DDRA  = 0x00;
0001d4 9760      	SBIW R28,16
                 ;	seconds -> R17
                 ;	minutes -> R16
                 ;	hours -> R19
                 ;	A -> Y+0
0001d5 e010      	LDI  R17,0
0001d6 e000      	LDI  R16,0
0001d7 e030      	LDI  R19,0
0001d8 e0e0      	LDI  R30,LOW(0)
0001d9 bbea      	OUT  0x1A,R30
                 ; 0000 009E     PORTA = 0x00;
0001da bbeb      	OUT  0x1B,R30
                 ; 0000 009F 
                 ; 0000 00A0     // Port B initialization
                 ; 0000 00A1     DDRB  = 0x01;  // Set PORTB.0 as output (for LED/Relay control)
0001db e0e1      	LDI  R30,LOW(1)
0001dc bbe7      	OUT  0x17,R30
                 ; 0000 00A2     PORTB = 0x00;  // Initialize PORTB to low
0001dd e0e0      	LDI  R30,LOW(0)
0001de bbe8      	OUT  0x18,R30
                 ; 0000 00A3 
                 ; 0000 00A4     // Port C initialization
                 ; 0000 00A5     DDRC = 0xF7;
0001df efe7      	LDI  R30,LOW(247)
0001e0 bbe4      	OUT  0x14,R30
                 ; 0000 00A6 
                 ; 0000 00A7     // Initialize other ports (if needed)
                 ; 0000 00A8 
                 ; 0000 00A9     // ADC initialization
                 ; 0000 00AA     // ADC Clock frequency: 1000.000 kHz
                 ; 0000 00AB     // ADC Voltage Reference: AREF pin
                 ; 0000 00AC     // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00AD     ADMUX = ADC_VREF_TYPE & 0xff;
0001e1 ece0      	LDI  R30,LOW(192)
0001e2 b9e7      	OUT  0x7,R30
                 ; 0000 00AE     ADCSRA = 0x83;
0001e3 e8e3      	LDI  R30,LOW(131)
0001e4 b9e6      	OUT  0x6,R30
                 ; 0000 00AF     // SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
                 ; 0000 00B0 
                 ; 0000 00B1     // Alphanumeric LCD initialization
                 ; 0000 00B2     // Connections are specified in the
                 ; 0000 00B3     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00B4     // RS - PORTC Bit 0
                 ; 0000 00B5     // RD - PORTC Bit 1
                 ; 0000 00B6     // EN - PORTC Bit 2
                 ; 0000 00B7     // D4 - PORTC Bit 4
                 ; 0000 00B8     // D5 - PORTC Bit 5
                 ; 0000 00B9     // D6 - PORTC Bit 6
                 ; 0000 00BA     // D7 - PORTC Bit 7
                 ; 0000 00BB     // Characters/line: 16
                 ; 0000 00BC     lcd_init(16);
0001e5 e1a0      	LDI  R26,LOW(16)
0001e6 d0b3      	RCALL _lcd_init
                 ; 0000 00BD     lcd_clear();
0001e7 d086      	RCALL _lcd_clear
                 ; 0000 00BE 
                 ; 0000 00BF     // Initialize USART for RFID communication (9600 baud rate)
                 ; 0000 00C0     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00C1     // USART Receiver: On
                 ; 0000 00C2     // USART Transmitter: On
                 ; 0000 00C3     // USART Mode: Asynchronous
                 ; 0000 00C4     // USART Baud Rate: 9600
                 ; 0000 00C5     usart_init(9600);
0001e8 e8a0      	LDI  R26,LOW(9600)
0001e9 e2b5      	LDI  R27,HIGH(9600)
0001ea df21      	RCALL _usart_init
                 ; 0000 00C6 
                 ; 0000 00C7     // Initialize external interrupt on INT0 (PD2)
                 ; 0000 00C8     // INT0: On
                 ; 0000 00C9     // INT0 Mode: Falling Edge
                 ; 0000 00CA     GICR |= (1 << INT0);  // Enable INT0
0001eb b7eb      	IN   R30,0x3B
0001ec 64e0      	ORI  R30,0x40
0001ed bfeb      	OUT  0x3B,R30
                 ; 0000 00CB     MCUCR |= (1 << ISC01);  // Trigger INT0 on falling edge
0001ee b7e5      	IN   R30,0x35
0001ef 60e2      	ORI  R30,2
0001f0 bfe5      	OUT  0x35,R30
                 ; 0000 00CC     GIFR |= (1 << INTF0);  // Clear INT0 interrupt flag
0001f1 b7ea      	IN   R30,0x3A
0001f2 64e0      	ORI  R30,0x40
0001f3 bfea      	OUT  0x3A,R30
                 ; 0000 00CD 
                 ; 0000 00CE     // Enable global interrupts
                 ; 0000 00CF     #asm("sei");
0001f4 9478      	SEI
                 ; 0000 00D0 
                 ; 0000 00D1     lcd_gotoxy(0,0);
0001f5 d2ab      	RCALL SUBOPT_0x0
                 ; 0000 00D2     lcd_puts("Developed by:");
                +
0001f6 eaaa     +LDI R26 , LOW ( _0x20 + ( 0 ) )
0001f7 e0b2     +LDI R27 , HIGH ( _0x20 + ( 0 ) )
                 	__POINTW2MN _0x20,0
0001f8 d2b2      	RCALL SUBOPT_0x2
                 ; 0000 00D3     lcd_gotoxy(0,1);
                 ; 0000 00D4     lcd_puts("Nariman Ziaie");
                +
0001f9 eba8     +LDI R26 , LOW ( _0x20 + ( 14 ) )
0001fa e0b2     +LDI R27 , HIGH ( _0x20 + ( 14 ) )
                 	__POINTW2MN _0x20,14
0001fb d2b4      	RCALL SUBOPT_0x3
                 ; 0000 00D5     delay_ms(1000);
                 ; 0000 00D6 
                 ; 0000 00D7     while (1) {
                 _0x21:
                 ; 0000 00D8         // Update time
                 ; 0000 00D9         seconds++;
0001fc 5f1f      	SUBI R17,-1
                 ; 0000 00DA         if (seconds > 59) {
0001fd 331c      	CPI  R17,60
0001fe f010      	BRLO _0x24
                 ; 0000 00DB             seconds = 0;
0001ff e010      	LDI  R17,LOW(0)
                 ; 0000 00DC             minutes++;
000200 5f0f      	SUBI R16,-1
                 ; 0000 00DD         }
                 ; 0000 00DE         if (minutes > 59) {
                 _0x24:
000201 330c      	CPI  R16,60
000202 f010      	BRLO _0x25
                 ; 0000 00DF             minutes = 0;
000203 e000      	LDI  R16,LOW(0)
                 ; 0000 00E0             hours++;
000204 5f3f      	SUBI R19,-1
                 ; 0000 00E1         }
                 ; 0000 00E2         if (hours > 23) {
                 _0x25:
000205 3138      	CPI  R19,24
000206 f020      	BRLO _0x26
                 ; 0000 00E3             hours = minutes = seconds = 0;
000207 e0e0      	LDI  R30,LOW(0)
000208 2f1e      	MOV  R17,R30
000209 2f0e      	MOV  R16,R30
00020a 2f3e      	MOV  R19,R30
                 ; 0000 00E4         }
                 ; 0000 00E5 
                 ; 0000 00E6         // Display time on the LCD
                 ; 0000 00E7         sprintf(A, "Time: %02u:%02u:%02u ", hours, minutes, seconds);
                 _0x26:
00020b 01fe      	MOVW R30,R28
00020c 93fa      	ST   -Y,R31
00020d 93ea      	ST   -Y,R30
                +
00020e e4e1     +LDI R30 , LOW ( 2 * _0x0 + ( 219 ) )
00020f e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 219 ) )
                 	__POINTW1FN _0x0,219
000210 93fa      	ST   -Y,R31
000211 93ea      	ST   -Y,R30
000212 2fe3      	MOV  R30,R19
000213 d2a0      	RCALL SUBOPT_0x4
000214 2fe0      	MOV  R30,R16
000215 d29e      	RCALL SUBOPT_0x4
000216 2fe1      	MOV  R30,R17
000217 d29c      	RCALL SUBOPT_0x4
000218 e08c      	LDI  R24,12
000219 d23f      	RCALL _sprintf
00021a 9660      	ADIW R28,16
                 ; 0000 00E8         lcd_gotoxy(0, 0);
00021b d285      	RCALL SUBOPT_0x0
                 ; 0000 00E9         lcd_puts(A);
00021c 01de      	MOVW R26,R28
00021d d06d      	RCALL _lcd_puts
                 ; 0000 00EA 
                 ; 0000 00EB         // Read temperature and display it
                 ; 0000 00EC         temperature = read_adc(0);
00021e e0a0      	LDI  R26,LOW(0)
00021f dedd      	RCALL _read_adc
000220 012f      	MOVW R4,R30
                 ; 0000 00ED         sprintf(s, "Actual Temp=%u", temperature / 4);
000221 ece6      	LDI  R30,LOW(_s)
000222 e0f2      	LDI  R31,HIGH(_s)
000223 93fa      	ST   -Y,R31
000224 93ea      	ST   -Y,R30
                +
000225 e5e7     +LDI R30 , LOW ( 2 * _0x0 + ( 241 ) )
000226 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 241 ) )
                 	__POINTW1FN _0x0,241
000227 93fa      	ST   -Y,R31
000228 93ea      	ST   -Y,R30
000229 01f2      	MOVW R30,R4
00022a d2ee      	RCALL __LSRW2
00022b 2766      	CLR  R22
00022c 2777      	CLR  R23
00022d d32d      	RCALL __PUTPARD1
00022e e084      	LDI  R24,4
00022f d229      	RCALL _sprintf
000230 9628      	ADIW R28,8
                 ; 0000 00EE         lcd_gotoxy(0, 1);
000231 e0e0      	LDI  R30,LOW(0)
000232 93ea      	ST   -Y,R30
000233 e0a1      	LDI  R26,LOW(1)
000234 d027      	RCALL _lcd_gotoxy
                 ; 0000 00EF         lcd_puts(s);
000235 eca6      	LDI  R26,LOW(_s)
000236 e0b2      	LDI  R27,HIGH(_s)
000237 d278      	RCALL SUBOPT_0x3
                 ; 0000 00F0 
                 ; 0000 00F1         delay_ms(1000);  // Update time and temp every second
                 ; 0000 00F2     }
000238 cfc3      	RJMP _0x21
                 ; 0000 00F3 }
                 _0x27:
000239 cfff      	RJMP _0x27
                 ; .FEND
                 
                 	.DSEG
                 _0x20:
0002aa           	.BYTE 0x1C
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00023a 931a      	ST   -Y,R17
00023b 2f1a      	MOV  R17,R26
00023c b3e5      	IN   R30,0x15
00023d 70ef      	ANDI R30,LOW(0xF)
00023e 2fae      	MOV  R26,R30
00023f 2fe1      	MOV  R30,R17
000240 7fe0      	ANDI R30,LOW(0xF0)
000241 2bea      	OR   R30,R26
000242 bbe5      	OUT  0x15,R30
                +
000243 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000244 958a     +DEC R24
000245 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000246 9aaa      	SBI  0x15,2
                +
000247 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000248 958a     +DEC R24
000249 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00024a 98aa      	CBI  0x15,2
                +
00024b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00024c 958a     +DEC R24
00024d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00024e c074      	RJMP _0x2080003
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00024f 93aa      	ST   -Y,R26
000250 81a8      	LD   R26,Y
000251 dfe8      	RCALL __lcd_write_nibble_G100
000252 81e8          ld    r30,y
000253 95e2          swap  r30
000254 83e8          st    y,r30
000255 81a8      	LD   R26,Y
000256 dfe3      	RCALL __lcd_write_nibble_G100
                +
000257 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000258 958a     +DEC R24
000259 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00025a 940c 02fc 	JMP  _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00025c 931a      	ST   -Y,R17
00025d 930a      	ST   -Y,R16
00025e 2f1a      	MOV  R17,R26
00025f 810a      	LDD  R16,Y+2
000260 2fe1      	MOV  R30,R17
000261 e0f0      	LDI  R31,0
000262 51ec      	SUBI R30,LOW(-__base_y_G100)
000263 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000264 81e0      	LD   R30,Z
000265 0fe0      	ADD  R30,R16
000266 2fae      	MOV  R26,R30
000267 dfe7      	RCALL __lcd_write_data
000268 2e70      	MOV  R7,R16
000269 2e61      	MOV  R6,R17
00026a 8119      	LDD  R17,Y+1
00026b 8108      	LDD  R16,Y+0
00026c 9623      	ADIW R28,3
00026d 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00026e e0a2      	LDI  R26,LOW(2)
00026f d249      	RCALL SUBOPT_0x5
000270 e0ac      	LDI  R26,LOW(12)
000271 dfdd      	RCALL __lcd_write_data
000272 e0a1      	LDI  R26,LOW(1)
000273 d245      	RCALL SUBOPT_0x5
000274 e0e0      	LDI  R30,LOW(0)
000275 2e6e      	MOV  R6,R30
000276 2e7e      	MOV  R7,R30
000277 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000278 931a      	ST   -Y,R17
000279 2f1a      	MOV  R17,R26
00027a 301a      	CPI  R17,10
00027b f011      	BREQ _0x2000005
00027c 1479      	CP   R7,R9
00027d f038      	BRLO _0x2000004
                 _0x2000005:
00027e e0e0      	LDI  R30,LOW(0)
00027f 93ea      	ST   -Y,R30
000280 9463      	INC  R6
000281 2da6      	MOV  R26,R6
000282 dfd9      	RCALL _lcd_gotoxy
000283 301a      	CPI  R17,10
000284 f1f1      	BREQ _0x2080003
                 _0x2000004:
000285 9473      	INC  R7
000286 9aa8      	SBI  0x15,0
000287 2fa1      	MOV  R26,R17
000288 dfc6      	RCALL __lcd_write_data
000289 98a8      	CBI  0x15,0
00028a c038      	RJMP _0x2080003
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00028b d265      	RCALL __SAVELOCR4
00028c 019d      	MOVW R18,R26
                 _0x2000008:
00028d 01d9      	MOVW R26,R18
                +
00028e 5f2f     +SUBI R18 , LOW ( - 1 )
00028f 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000290 91ec      	LD   R30,X
000291 2f1e      	MOV  R17,R30
000292 30e0      	CPI  R30,0
000293 f019      	BREQ _0x200000A
000294 2fa1      	MOV  R26,R17
000295 dfe2      	RCALL _lcd_putchar
000296 cff6      	RJMP _0x2000008
                 _0x200000A:
000297 d260      	RCALL __LOADLOCR4
                 _0x2080004:
000298 9624      	ADIW R28,4
000299 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00029a 931a      	ST   -Y,R17
00029b 2f1a      	MOV  R17,R26
00029c b3e4      	IN   R30,0x14
00029d 6fe0      	ORI  R30,LOW(0xF0)
00029e bbe4      	OUT  0x14,R30
00029f 9aa2      	SBI  0x14,2
0002a0 9aa0      	SBI  0x14,0
0002a1 9aa1      	SBI  0x14,1
0002a2 98aa      	CBI  0x15,2
0002a3 98a8      	CBI  0x15,0
0002a4 98a9      	CBI  0x15,1
0002a5 2e91      	MOV  R9,R17
0002a6 2fe1      	MOV  R30,R17
0002a7 58e0      	SUBI R30,-LOW(128)
                +
0002a8 93e0 02e6+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0002aa 2fe1      	MOV  R30,R17
0002ab 54e0      	SUBI R30,-LOW(192)
                +
0002ac 93e0 02e7+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0002ae e1a4      	LDI  R26,LOW(20)
0002af e0b0      	LDI  R27,0
0002b0 d2af      	RCALL _delay_ms
0002b1 d20b      	RCALL SUBOPT_0x6
0002b2 d20a      	RCALL SUBOPT_0x6
0002b3 d209      	RCALL SUBOPT_0x6
0002b4 e2a0      	LDI  R26,LOW(32)
0002b5 df84      	RCALL __lcd_write_nibble_G100
                +
0002b6 ec88     +LDI R24 , LOW ( 200 )
0002b7 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002b8 9701     +SBIW R24 , 1
0002b9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002ba e2a8      	LDI  R26,LOW(40)
0002bb df93      	RCALL __lcd_write_data
0002bc e0a4      	LDI  R26,LOW(4)
0002bd df91      	RCALL __lcd_write_data
0002be e8a5      	LDI  R26,LOW(133)
0002bf df8f      	RCALL __lcd_write_data
0002c0 e0a6      	LDI  R26,LOW(6)
0002c1 df8d      	RCALL __lcd_write_data
0002c2 dfab      	RCALL _lcd_clear
                 _0x2080003:
0002c3 9119      	LD   R17,Y+
0002c4 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0002c5 93ba      	ST   -Y,R27
0002c6 93aa      	ST   -Y,R26
0002c7 91a9          ld   r26,y+
0002c8 91b9          ld   r27,y+
0002c9 27ee          clr  r30
0002ca 27ff          clr  r31
                 strlen0:
0002cb 916d          ld   r22,x+
0002cc 2366          tst  r22
0002cd f011          breq strlen1
0002ce 9631          adiw r30,1
0002cf cffb          rjmp strlen0
                 strlen1:
0002d0 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0002d1 93ba      	ST   -Y,R27
0002d2 93aa      	ST   -Y,R26
0002d3 27aa          clr  r26
0002d4 27bb          clr  r27
0002d5 91e9          ld   r30,y+
0002d6 91f9          ld   r31,y+
                 strlenf0:
0002d7 9005      	lpm  r0,z+
0002d8 2000          tst  r0
0002d9 f011          breq strlenf1
0002da 9611          adiw r26,1
0002db cffb          rjmp strlenf0
                 strlenf1:
0002dc 01fd          movw r30,r26
0002dd 9508          ret
                 ; .FEND
                 _strncmp:
                 ; .FSTART _strncmp
0002de 93aa      	ST   -Y,R26
0002df 2766          clr  r22
0002e0 2777          clr  r23
0002e1 9189          ld   r24,y+
0002e2 91e9          ld   r30,y+
0002e3 91f9          ld   r31,y+
0002e4 91a9          ld   r26,y+
0002e5 91b9          ld   r27,y+
                 strncmp0:
0002e6 2388          tst  r24
0002e7 f049          breq strncmp1
0002e8 958a          dec  r24
0002e9 916d          ld   r22,x+
0002ea 9171          ld   r23,z+
0002eb 1767          cp   r22,r23
0002ec f421          brne strncmp1
0002ed 2366          tst  r22
0002ee f7b9          brne strncmp0
                 strncmp3:
0002ef 27ee          clr  r30
0002f0 9508          ret
                 strncmp1:
0002f1 1b67          sub  r22,r23
0002f2 f3e1          breq strncmp3
0002f3 e0e1          ldi  r30,1
0002f4 f408          brcc strncmp2
0002f5 50e2          subi r30,2
                 strncmp2:
0002f6 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0002f7 93aa      	ST   -Y,R26
                 putchar0:
0002f8 9b5d           sbis usr,udre
0002f9 cffe           rjmp putchar0
0002fa 81e8           ld   r30,y
0002fb b9ec           out  udr,r30
                 _0x2080002:
0002fc 9621      	ADIW R28,1
0002fd 9508      	RET
                 ; .FEND
                 _put_usart_G102:
                 ; .FSTART _put_usart_G102
0002fe d1f2      	RCALL __SAVELOCR4
0002ff 018d      	MOVW R16,R26
000300 813c      	LDD  R19,Y+4
000301 2fa3      	MOV  R26,R19
000302 dff4      	RCALL _putchar
000303 01d8      	MOVW R26,R16
000304 d1bf      	RCALL SUBOPT_0x7
000305 d1f2      	RCALL __LOADLOCR4
000306 9625      	ADIW R28,5
000307 9508      	RET
                 ; .FEND
                 _put_buff_G102:
                 ; .FSTART _put_buff_G102
000308 d1e6      	RCALL __SAVELOCR6
000309 019d      	MOVW R18,R26
00030a 815e      	LDD  R21,Y+6
00030b 9612      	ADIW R26,2
00030c d246      	RCALL __GETW1P
00030d 9730      	SBIW R30,0
00030e f0e1      	BREQ _0x2040010
00030f 01d9      	MOVW R26,R18
000310 9614      	ADIW R26,4
000311 d241      	RCALL __GETW1P
000312 018f      	MOVW R16,R30
000313 9730      	SBIW R30,0
000314 f059      	BREQ _0x2040012
                +
000315 3002     +CPI R16 , LOW ( 2 )
000316 e0e0     +LDI R30 , HIGH ( 2 )
000317 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000318 f060      	BRLO _0x2040013
000319 01f8      	MOVW R30,R16
00031a 9731      	SBIW R30,1
00031b 018f      	MOVW R16,R30
                +
00031c 01d9     +MOVW R26 , R18
00031d 9614     +ADIW R26 , 4
00031e 93ed     +ST X + , R30
00031f 93fc     +ST X , R31
                 	__PUTW1RNS 18,4
                 _0x2040012:
000320 01d9      	MOVW R26,R18
000321 9612      	ADIW R26,2
000322 d1a1      	RCALL SUBOPT_0x7
000323 9731      	SBIW R30,1
000324 8350      	ST   Z,R21
                 _0x2040013:
000325 01d9      	MOVW R26,R18
000326 d22c      	RCALL __GETW1P
000327 23ff      	TST  R31
000328 f00a      	BRMI _0x2040014
000329 d19a      	RCALL SUBOPT_0x7
                 _0x2040014:
00032a c005      	RJMP _0x2040015
                 _0x2040010:
00032b 01d9      	MOVW R26,R18
00032c efef      	LDI  R30,LOW(65535)
00032d efff      	LDI  R31,HIGH(65535)
00032e 93ed      	ST   X+,R30
00032f 93fc      	ST   X,R31
                 _0x2040015:
000330 d1c5      	RCALL __LOADLOCR6
000331 9627      	ADIW R28,7
000332 9508      	RET
                 ; .FEND
                 __print_G102:
                 ; .FSTART __print_G102
000333 93ba      	ST   -Y,R27
000334 93aa      	ST   -Y,R26
000335 9726      	SBIW R28,6
000336 d1b8      	RCALL __SAVELOCR6
000337 e010      	LDI  R17,0
000338 85ac      	LDD  R26,Y+12
000339 85bd      	LDD  R27,Y+12+1
00033a e0e0      	LDI  R30,LOW(0)
00033b e0f0      	LDI  R31,HIGH(0)
00033c 93ed      	ST   X+,R30
00033d 93fc      	ST   X,R31
                 _0x2040016:
00033e 89ea      	LDD  R30,Y+18
00033f 89fb      	LDD  R31,Y+18+1
000340 9631      	ADIW R30,1
000341 8bea      	STD  Y+18,R30
000342 8bfb      	STD  Y+18+1,R31
000343 9731      	SBIW R30,1
000344 91e4      	LPM  R30,Z
000345 2f2e      	MOV  R18,R30
000346 30e0      	CPI  R30,0
000347 f409      	BRNE PC+2
000348 c109      	RJMP _0x2040018
000349 2fe1      	MOV  R30,R17
00034a 30e0      	CPI  R30,0
00034b f431      	BRNE _0x204001C
00034c 3225      	CPI  R18,37
00034d f411      	BRNE _0x204001D
00034e e011      	LDI  R17,LOW(1)
00034f c001      	RJMP _0x204001E
                 _0x204001D:
000350 d179      	RCALL SUBOPT_0x8
                 _0x204001E:
000351 c0ff      	RJMP _0x204001B
                 _0x204001C:
000352 30e1      	CPI  R30,LOW(0x1)
000353 f4a1      	BRNE _0x204001F
000354 3225      	CPI  R18,37
000355 f411      	BRNE _0x2040020
000356 d173      	RCALL SUBOPT_0x8
000357 c0f8      	RJMP _0x20400CC
                 _0x2040020:
000358 e012      	LDI  R17,LOW(2)
000359 e040      	LDI  R20,LOW(0)
00035a e000      	LDI  R16,LOW(0)
00035b 322d      	CPI  R18,45
00035c f411      	BRNE _0x2040021
00035d e001      	LDI  R16,LOW(1)
00035e c0f2      	RJMP _0x204001B
                 _0x2040021:
00035f 322b      	CPI  R18,43
000360 f411      	BRNE _0x2040022
000361 e24b      	LDI  R20,LOW(43)
000362 c0ee      	RJMP _0x204001B
                 _0x2040022:
000363 3220      	CPI  R18,32
000364 f411      	BRNE _0x2040023
000365 e240      	LDI  R20,LOW(32)
000366 c0ea      	RJMP _0x204001B
                 _0x2040023:
000367 c002      	RJMP _0x2040024
                 _0x204001F:
000368 30e2      	CPI  R30,LOW(0x2)
000369 f439      	BRNE _0x2040025
                 _0x2040024:
00036a e050      	LDI  R21,LOW(0)
00036b e013      	LDI  R17,LOW(3)
00036c 3320      	CPI  R18,48
00036d f411      	BRNE _0x2040026
00036e 6800      	ORI  R16,LOW(128)
00036f c0e1      	RJMP _0x204001B
                 _0x2040026:
000370 c003      	RJMP _0x2040027
                 _0x2040025:
000371 30e3      	CPI  R30,LOW(0x3)
000372 f009      	BREQ PC+2
000373 c0dd      	RJMP _0x204001B
                 _0x2040027:
000374 3320      	CPI  R18,48
000375 f010      	BRLO _0x204002A
000376 332a      	CPI  R18,58
000377 f008      	BRLO _0x204002B
                 _0x204002A:
000378 c007      	RJMP _0x2040029
                 _0x204002B:
000379 e0aa      	LDI  R26,LOW(10)
00037a 9f5a      	MUL  R21,R26
00037b 2d50      	MOV  R21,R0
00037c 2fe2      	MOV  R30,R18
00037d 53e0      	SUBI R30,LOW(48)
00037e 0f5e      	ADD  R21,R30
00037f c0d1      	RJMP _0x204001B
                 _0x2040029:
000380 2fe2      	MOV  R30,R18
000381 36e3      	CPI  R30,LOW(0x63)
000382 f439      	BRNE _0x204002F
000383 d14d      	RCALL SUBOPT_0x9
000384 89e8      	LDD  R30,Y+16
000385 89f9      	LDD  R31,Y+16+1
000386 81a4      	LDD  R26,Z+4
000387 93aa      	ST   -Y,R26
000388 d14e      	RCALL SUBOPT_0xA
000389 c0c6      	RJMP _0x2040030
                 _0x204002F:
00038a 37e3      	CPI  R30,LOW(0x73)
00038b f429      	BRNE _0x2040032
00038c d144      	RCALL SUBOPT_0x9
00038d d14f      	RCALL SUBOPT_0xB
00038e df36      	RCALL _strlen
00038f 2f1e      	MOV  R17,R30
000390 c007      	RJMP _0x2040033
                 _0x2040032:
000391 37e0      	CPI  R30,LOW(0x70)
000392 f449      	BRNE _0x2040035
000393 d13d      	RCALL SUBOPT_0x9
000394 d148      	RCALL SUBOPT_0xB
000395 df3b      	RCALL _strlenf
000396 2f1e      	MOV  R17,R30
000397 6008      	ORI  R16,LOW(8)
                 _0x2040033:
000398 6002      	ORI  R16,LOW(2)
000399 770f      	ANDI R16,LOW(127)
00039a e030      	LDI  R19,LOW(0)
00039b c038      	RJMP _0x2040036
                 _0x2040035:
00039c 36e4      	CPI  R30,LOW(0x64)
00039d f011      	BREQ _0x2040039
00039e 36e9      	CPI  R30,LOW(0x69)
00039f f411      	BRNE _0x204003A
                 _0x2040039:
0003a0 6004      	ORI  R16,LOW(4)
0003a1 c002      	RJMP _0x204003B
                 _0x204003A:
0003a2 37e5      	CPI  R30,LOW(0x75)
0003a3 f431      	BRNE _0x204003C
                 _0x204003B:
0003a4 e5e4      	LDI  R30,LOW(_tbl10_G102*2)
0003a5 e0f0      	LDI  R31,HIGH(_tbl10_G102*2)
0003a6 83ee      	STD  Y+6,R30
0003a7 83ff      	STD  Y+6+1,R31
0003a8 e015      	LDI  R17,LOW(5)
0003a9 c00c      	RJMP _0x204003D
                 _0x204003C:
0003aa 35e8      	CPI  R30,LOW(0x58)
0003ab f411      	BRNE _0x204003F
0003ac 6008      	ORI  R16,LOW(8)
0003ad c003      	RJMP _0x2040040
                 _0x204003F:
0003ae 37e8      	CPI  R30,LOW(0x78)
0003af f009      	BREQ PC+2
0003b0 c09f      	RJMP _0x2040071
                 _0x2040040:
0003b1 e5ee      	LDI  R30,LOW(_tbl16_G102*2)
0003b2 e0f0      	LDI  R31,HIGH(_tbl16_G102*2)
0003b3 83ee      	STD  Y+6,R30
0003b4 83ff      	STD  Y+6+1,R31
0003b5 e014      	LDI  R17,LOW(4)
                 _0x204003D:
0003b6 ff02      	SBRS R16,2
0003b7 c015      	RJMP _0x2040042
0003b8 d118      	RCALL SUBOPT_0x9
0003b9 89a8      	LDD  R26,Y+16
0003ba 89b9      	LDD  R27,Y+16+1
0003bb 9614      	ADIW R26,4
0003bc 91ed      	LD   R30,X+
0003bd 91fd      	LD   R31,X+
0003be 87ea      	STD  Y+10,R30
0003bf 87fb      	STD  Y+10+1,R31
0003c0 85ab      	LDD  R26,Y+11
0003c1 23aa      	TST  R26
0003c2 f422      	BRPL _0x2040043
0003c3 d141      	RCALL __ANEGW1
0003c4 87ea      	STD  Y+10,R30
0003c5 87fb      	STD  Y+10+1,R31
0003c6 e24d      	LDI  R20,LOW(45)
                 _0x2040043:
0003c7 3040      	CPI  R20,0
0003c8 f011      	BREQ _0x2040044
0003c9 5f1f      	SUBI R17,-LOW(1)
0003ca c001      	RJMP _0x2040045
                 _0x2040044:
0003cb 7f0b      	ANDI R16,LOW(251)
                 _0x2040045:
0003cc c007      	RJMP _0x2040046
                 _0x2040042:
0003cd d103      	RCALL SUBOPT_0x9
0003ce 89a8      	LDD  R26,Y+16
0003cf 89b9      	LDD  R27,Y+16+1
0003d0 9614      	ADIW R26,4
0003d1 d181      	RCALL __GETW1P
0003d2 87ea      	STD  Y+10,R30
0003d3 87fb      	STD  Y+10+1,R31
                 _0x2040046:
                 _0x2040036:
0003d4 fd00      	SBRC R16,0
0003d5 c010      	RJMP _0x2040047
                 _0x2040048:
0003d6 1715      	CP   R17,R21
0003d7 f470      	BRSH _0x204004A
0003d8 ff07      	SBRS R16,7
0003d9 c008      	RJMP _0x204004B
0003da ff02      	SBRS R16,2
0003db c004      	RJMP _0x204004C
0003dc 7f0b      	ANDI R16,LOW(251)
0003dd 2f24      	MOV  R18,R20
0003de 5011      	SUBI R17,LOW(1)
0003df c001      	RJMP _0x204004D
                 _0x204004C:
0003e0 e320      	LDI  R18,LOW(48)
                 _0x204004D:
0003e1 c001      	RJMP _0x204004E
                 _0x204004B:
0003e2 e220      	LDI  R18,LOW(32)
                 _0x204004E:
0003e3 d0e6      	RCALL SUBOPT_0x8
0003e4 5051      	SUBI R21,LOW(1)
0003e5 cff0      	RJMP _0x2040048
                 _0x204004A:
                 _0x2040047:
0003e6 2f31      	MOV  R19,R17
0003e7 ff01      	SBRS R16,1
0003e8 c016      	RJMP _0x204004F
                 _0x2040050:
0003e9 3030      	CPI  R19,0
0003ea f099      	BREQ _0x2040052
0003eb ff03      	SBRS R16,3
0003ec c006      	RJMP _0x2040053
0003ed 81ee      	LDD  R30,Y+6
0003ee 81ff      	LDD  R31,Y+6+1
0003ef 9125      	LPM  R18,Z+
0003f0 83ee      	STD  Y+6,R30
0003f1 83ff      	STD  Y+6+1,R31
0003f2 c005      	RJMP _0x2040054
                 _0x2040053:
0003f3 81ae      	LDD  R26,Y+6
0003f4 81bf      	LDD  R27,Y+6+1
0003f5 912d      	LD   R18,X+
0003f6 83ae      	STD  Y+6,R26
0003f7 83bf      	STD  Y+6+1,R27
                 _0x2040054:
0003f8 d0d1      	RCALL SUBOPT_0x8
0003f9 3050      	CPI  R21,0
0003fa f009      	BREQ _0x2040055
0003fb 5051      	SUBI R21,LOW(1)
                 _0x2040055:
0003fc 5031      	SUBI R19,LOW(1)
0003fd cfeb      	RJMP _0x2040050
                 _0x2040052:
0003fe c048      	RJMP _0x2040056
                 _0x204004F:
                 _0x2040058:
0003ff e320      	LDI  R18,LOW(48)
000400 81ee      	LDD  R30,Y+6
000401 81ff      	LDD  R31,Y+6+1
000402 d154      	RCALL __GETW1PF
000403 87e8      	STD  Y+8,R30
000404 87f9      	STD  Y+8+1,R31
000405 81ee      	LDD  R30,Y+6
000406 81ff      	LDD  R31,Y+6+1
000407 9632      	ADIW R30,2
000408 83ee      	STD  Y+6,R30
000409 83ff      	STD  Y+6+1,R31
                 _0x204005A:
00040a 85e8      	LDD  R30,Y+8
00040b 85f9      	LDD  R31,Y+8+1
00040c 85aa      	LDD  R26,Y+10
00040d 85bb      	LDD  R27,Y+10+1
00040e 17ae      	CP   R26,R30
00040f 07bf      	CPC  R27,R31
000410 f050      	BRLO _0x204005C
000411 5f2f      	SUBI R18,-LOW(1)
000412 85a8      	LDD  R26,Y+8
000413 85b9      	LDD  R27,Y+8+1
000414 85ea      	LDD  R30,Y+10
000415 85fb      	LDD  R31,Y+10+1
000416 1bea      	SUB  R30,R26
000417 0bfb      	SBC  R31,R27
000418 87ea      	STD  Y+10,R30
000419 87fb      	STD  Y+10+1,R31
00041a cfef      	RJMP _0x204005A
                 _0x204005C:
00041b 332a      	CPI  R18,58
00041c f028      	BRLO _0x204005D
00041d ff03      	SBRS R16,3
00041e c002      	RJMP _0x204005E
00041f 5f29      	SUBI R18,-LOW(7)
000420 c001      	RJMP _0x204005F
                 _0x204005E:
000421 5d29      	SUBI R18,-LOW(39)
                 _0x204005F:
                 _0x204005D:
000422 fd04      	SBRC R16,4
000423 c019      	RJMP _0x2040061
000424 3321      	CPI  R18,49
000425 f420      	BRSH _0x2040063
000426 85a8      	LDD  R26,Y+8
000427 85b9      	LDD  R27,Y+8+1
000428 9711      	SBIW R26,1
000429 f409      	BRNE _0x2040062
                 _0x2040063:
00042a c009      	RJMP _0x20400CD
                 _0x2040062:
00042b 1753      	CP   R21,R19
00042c f010      	BRLO _0x2040067
00042d ff00      	SBRS R16,0
00042e c001      	RJMP _0x2040068
                 _0x2040067:
00042f c011      	RJMP _0x2040066
                 _0x2040068:
000430 e220      	LDI  R18,LOW(32)
000431 ff07      	SBRS R16,7
000432 c00a      	RJMP _0x2040069
000433 e320      	LDI  R18,LOW(48)
                 _0x20400CD:
000434 6100      	ORI  R16,LOW(16)
000435 ff02      	SBRS R16,2
000436 c006      	RJMP _0x204006A
000437 7f0b      	ANDI R16,LOW(251)
000438 934a      	ST   -Y,R20
000439 d09d      	RCALL SUBOPT_0xA
00043a 3050      	CPI  R21,0
00043b f009      	BREQ _0x204006B
00043c 5051      	SUBI R21,LOW(1)
                 _0x204006B:
                 _0x204006A:
                 _0x2040069:
                 _0x2040061:
00043d d08c      	RCALL SUBOPT_0x8
00043e 3050      	CPI  R21,0
00043f f009      	BREQ _0x204006C
000440 5051      	SUBI R21,LOW(1)
                 _0x204006C:
                 _0x2040066:
000441 5031      	SUBI R19,LOW(1)
000442 85a8      	LDD  R26,Y+8
000443 85b9      	LDD  R27,Y+8+1
000444 9712      	SBIW R26,2
000445 f008      	BRLO _0x2040059
000446 cfb8      	RJMP _0x2040058
                 _0x2040059:
                 _0x2040056:
000447 ff00      	SBRS R16,0
000448 c007      	RJMP _0x204006D
                 _0x204006E:
000449 3050      	CPI  R21,0
00044a f029      	BREQ _0x2040070
00044b 5051      	SUBI R21,LOW(1)
00044c e2e0      	LDI  R30,LOW(32)
00044d 93ea      	ST   -Y,R30
00044e d088      	RCALL SUBOPT_0xA
00044f cff9      	RJMP _0x204006E
                 _0x2040070:
                 _0x204006D:
                 _0x2040071:
                 _0x2040030:
                 _0x20400CC:
000450 e010      	LDI  R17,LOW(0)
                 _0x204001B:
000451 ceec      	RJMP _0x2040016
                 _0x2040018:
000452 85ac      	LDD  R26,Y+12
000453 85bd      	LDD  R27,Y+12+1
000454 91ed      	LD   R30,X+
000455 91fd      	LD   R31,X+
000456 d09f      	RCALL __LOADLOCR6
000457 9664      	ADIW R28,20
000458 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000459 92ff      	PUSH R15
00045a 2ef8      	MOV  R15,R24
00045b 9726      	SBIW R28,6
00045c d092      	RCALL __SAVELOCR6
00045d 01fe      	MOVW R30,R28
00045e d09e      	RCALL __ADDW1R15
                +
00045f 8546     +LDD R20 , Z + 14
000460 8557     +LDD R21 , Z + 14 + 1
                 	__GETWRZ 20,21,14
000461 2e04      	MOV  R0,R20
000462 2a05      	OR   R0,R21
000463 f419      	BRNE _0x2040072
000464 efef      	LDI  R30,LOW(65535)
000465 efff      	LDI  R31,HIGH(65535)
000466 c019      	RJMP _0x2080001
                 _0x2040072:
000467 01de      	MOVW R26,R28
000468 9618      	ADIW R26,8
000469 d097      	RCALL __ADDW2R15
00046a 018d      	MOVW R16,R26
                +
00046b 8748     +STD Y + 8 , R20
00046c 8759     +STD Y + 8 + 1 , R21
                 	__PUTWSR 20,21,8
00046d e0e0      	LDI  R30,LOW(0)
00046e 87ea      	STD  Y+10,R30
00046f 87eb      	STD  Y+10+1,R30
000470 01de      	MOVW R26,R28
000471 961c      	ADIW R26,12
000472 d074      	RCALL SUBOPT_0xC
000473 e0e8      	LDI  R30,LOW(_put_buff_G102)
000474 e0f3      	LDI  R31,HIGH(_put_buff_G102)
000475 93fa      	ST   -Y,R31
000476 93ea      	ST   -Y,R30
000477 01de      	MOVW R26,R28
000478 961c      	ADIW R26,12
000479 deb9      	RCALL __print_G102
00047a 019f      	MOVW R18,R30
00047b 85a8      	LDD  R26,Y+8
00047c 85b9      	LDD  R27,Y+8+1
00047d e0e0      	LDI  R30,LOW(0)
00047e 93ec      	ST   X,R30
00047f 01f9      	MOVW R30,R18
                 _0x2080001:
000480 d075      	RCALL __LOADLOCR6
000481 962c      	ADIW R28,12
000482 90ff      	POP  R15
000483 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
000484 92ff      	PUSH R15
000485 2ef8      	MOV  R15,R24
000486 9726      	SBIW R28,6
000487 931a      	ST   -Y,R17
000488 930a      	ST   -Y,R16
000489 01de      	MOVW R26,R28
00048a 9614      	ADIW R26,4
00048b d075      	RCALL __ADDW2R15
00048c 018d      	MOVW R16,R26
00048d e0e0      	LDI  R30,LOW(0)
00048e 83ec      	STD  Y+4,R30
00048f 83ed      	STD  Y+4+1,R30
000490 83ee      	STD  Y+6,R30
000491 83ef      	STD  Y+6+1,R30
000492 01de      	MOVW R26,R28
000493 9618      	ADIW R26,8
000494 d052      	RCALL SUBOPT_0xC
000495 efee      	LDI  R30,LOW(_put_usart_G102)
000496 e0f2      	LDI  R31,HIGH(_put_usart_G102)
000497 93fa      	ST   -Y,R31
000498 93ea      	ST   -Y,R30
000499 01de      	MOVW R26,R28
00049a 9618      	ADIW R26,8
00049b de97      	RCALL __print_G102
00049c 8119      	LDD  R17,Y+1
00049d 8108      	LDD  R16,Y+0
00049e 9628      	ADIW R28,8
00049f 90ff      	POP  R15
0004a0 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _s:
0002c6           	.BYTE 0xF
                 _rfid:
0002d5           	.BYTE 0xD
                 _rfid_index:
0002e2           	.BYTE 0x1
                 _rfid_complete:
0002e3           	.BYTE 0x1
                 __base_y_G100:
0002e4           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x0:
0004a1 e0e0      	LDI  R30,LOW(0)
0004a2 93ea      	ST   -Y,R30
0004a3 e0a0      	LDI  R26,LOW(0)
0004a4 cdb7      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
0004a5 93fa      	ST   -Y,R31
0004a6 93ea      	ST   -Y,R30
0004a7 e080      	LDI  R24,0
0004a8 dfdb      	RCALL _printf
0004a9 9622      	ADIW R28,2
0004aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2:
0004ab dddf      	RCALL _lcd_puts
0004ac e0e0      	LDI  R30,LOW(0)
0004ad 93ea      	ST   -Y,R30
0004ae e0a1      	LDI  R26,LOW(1)
0004af cdac      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0004b0 ddda      	RCALL _lcd_puts
0004b1 eea8      	LDI  R26,LOW(1000)
0004b2 e0b3      	LDI  R27,HIGH(1000)
0004b3 c0ac      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
0004b4 27ff      	CLR  R31
0004b5 2766      	CLR  R22
0004b6 2777      	CLR  R23
0004b7 d0a3      	RCALL __PUTPARD1
0004b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0004b9 dd95      	RCALL __lcd_write_data
0004ba e0a3      	LDI  R26,LOW(3)
0004bb e0b0      	LDI  R27,0
0004bc c0a3      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x6:
0004bd e3a0      	LDI  R26,LOW(48)
0004be dd7b      	RCALL __lcd_write_nibble_G100
                +
0004bf ec88     +LDI R24 , LOW ( 200 )
0004c0 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004c1 9701     +SBIW R24 , 1
0004c2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7:
0004c4 91ed      	LD   R30,X+
0004c5 91fd      	LD   R31,X+
0004c6 9631      	ADIW R30,1
0004c7 93fe      	ST   -X,R31
0004c8 93ee      	ST   -X,R30
0004c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x8:
0004ca 932a      	ST   -Y,R18
0004cb 85ad      	LDD  R26,Y+13
0004cc 85be      	LDD  R27,Y+13+1
0004cd 85ef      	LDD  R30,Y+15
0004ce 89f8      	LDD  R31,Y+15+1
0004cf 9509      	ICALL
0004d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x9:
0004d1 89e8      	LDD  R30,Y+16
0004d2 89f9      	LDD  R31,Y+16+1
0004d3 9734      	SBIW R30,4
0004d4 8be8      	STD  Y+16,R30
0004d5 8bf9      	STD  Y+16+1,R31
0004d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xA:
0004d7 85ad      	LDD  R26,Y+13
0004d8 85be      	LDD  R27,Y+13+1
0004d9 85ef      	LDD  R30,Y+15
0004da 89f8      	LDD  R31,Y+15+1
0004db 9509      	ICALL
0004dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xB:
0004dd 89a8      	LDD  R26,Y+16
0004de 89b9      	LDD  R27,Y+16+1
0004df 9614      	ADIW R26,4
0004e0 91ed      	LD   R30,X+
0004e1 91fd      	LD   R31,X+
0004e2 83ee      	STD  Y+6,R30
0004e3 83ff      	STD  Y+6+1,R31
0004e4 81ae      	LDD  R26,Y+6
0004e5 81bf      	LDD  R27,Y+6+1
0004e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
0004e7 d019      	RCALL __ADDW2R15
0004e8 91ed      	LD   R30,X+
0004e9 91fd      	LD   R31,X+
0004ea 93fa      	ST   -Y,R31
0004eb 93ea      	ST   -Y,R30
0004ec 931a      	ST   -Y,R17
0004ed 930a      	ST   -Y,R16
0004ee 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0004ef 935a      	ST   -Y,R21
                 __SAVELOCR5:
0004f0 934a      	ST   -Y,R20
                 __SAVELOCR4:
0004f1 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004f2 932a      	ST   -Y,R18
                 __SAVELOCR2:
0004f3 931a      	ST   -Y,R17
0004f4 930a      	ST   -Y,R16
0004f5 9508      	RET
                 
                 __LOADLOCR6:
0004f6 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0004f7 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0004f8 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0004f9 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0004fa 8119      	LDD  R17,Y+1
0004fb 8108      	LD   R16,Y
0004fc 9508      	RET
                 
                 __ADDW1R15:
0004fd 2400      	CLR  R0
0004fe 0def      	ADD  R30,R15
0004ff 1df0      	ADC  R31,R0
000500 9508      	RET
                 
                 __ADDW2R15:
000501 2400      	CLR  R0
000502 0daf      	ADD  R26,R15
000503 1db0      	ADC  R27,R0
000504 9508      	RET
                 
                 __ANEGW1:
000505 95f1      	NEG  R31
000506 95e1      	NEG  R30
000507 40f0      	SBCI R31,0
000508 9508      	RET
                 
                 __ANEGD1:
000509 95f0      	COM  R31
00050a 9560      	COM  R22
00050b 9570      	COM  R23
00050c 95e1      	NEG  R30
00050d 4fff      	SBCI R31,-1
00050e 4f6f      	SBCI R22,-1
00050f 4f7f      	SBCI R23,-1
000510 9508      	RET
                 
                 __ANEGD2:
000511 95b0      	COM  R27
000512 9580      	COM  R24
000513 9590      	COM  R25
000514 95a1      	NEG  R26
000515 4fbf      	SBCI R27,-1
000516 4f8f      	SBCI R24,-1
000517 4f9f      	SBCI R25,-1
000518 9508      	RET
                 
                 __LSRW2:
000519 95f6      	LSR  R31
00051a 95e7      	ROR  R30
00051b 95f6      	LSR  R31
00051c 95e7      	ROR  R30
00051d 9508      	RET
                 
                 __DIVD21U:
00051e 933f      	PUSH R19
00051f 934f      	PUSH R20
000520 935f      	PUSH R21
000521 2400      	CLR  R0
000522 2411      	CLR  R1
000523 01a0      	MOVW R20,R0
000524 e230      	LDI  R19,32
                 __DIVD21U1:
000525 0faa      	LSL  R26
000526 1fbb      	ROL  R27
000527 1f88      	ROL  R24
000528 1f99      	ROL  R25
000529 1c00      	ROL  R0
00052a 1c11      	ROL  R1
00052b 1f44      	ROL  R20
00052c 1f55      	ROL  R21
00052d 1a0e      	SUB  R0,R30
00052e 0a1f      	SBC  R1,R31
00052f 0b46      	SBC  R20,R22
000530 0b57      	SBC  R21,R23
000531 f428      	BRCC __DIVD21U2
000532 0e0e      	ADD  R0,R30
000533 1e1f      	ADC  R1,R31
000534 1f46      	ADC  R20,R22
000535 1f57      	ADC  R21,R23
000536 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000537 60a1      	SBR  R26,1
                 __DIVD21U3:
000538 953a      	DEC  R19
000539 f759      	BRNE __DIVD21U1
00053a 01fd      	MOVW R30,R26
00053b 01bc      	MOVW R22,R24
00053c 01d0      	MOVW R26,R0
00053d 01ca      	MOVW R24,R20
00053e 915f      	POP  R21
00053f 914f      	POP  R20
000540 913f      	POP  R19
000541 9508      	RET
                 
                 __DIVD21:
000542 d004      	RCALL __CHKSIGND
000543 dfda      	RCALL __DIVD21U
000544 f40e      	BRTC __DIVD211
000545 dfc3      	RCALL __ANEGD1
                 __DIVD211:
000546 9508      	RET
                 
                 __CHKSIGND:
000547 94e8      	CLT
000548 ff77      	SBRS R23,7
000549 c002      	RJMP __CHKSD1
00054a dfbe      	RCALL __ANEGD1
00054b 9468      	SET
                 __CHKSD1:
00054c ff97      	SBRS R25,7
00054d c004      	RJMP __CHKSD2
00054e dfc2      	RCALL __ANEGD2
00054f f800      	BLD  R0,0
000550 9403      	INC  R0
000551 fa00      	BST  R0,0
                 __CHKSD2:
000552 9508      	RET
                 
                 __GETW1P:
000553 91ed      	LD   R30,X+
000554 91fc      	LD   R31,X
000555 9711      	SBIW R26,1
000556 9508      	RET
                 
                 __GETW1PF:
000557 9005      	LPM  R0,Z+
000558 91f4      	LPM  R31,Z
000559 2de0      	MOV  R30,R0
00055a 9508      	RET
                 
                 __PUTPARD1:
00055b 937a      	ST   -Y,R23
00055c 936a      	ST   -Y,R22
00055d 93fa      	ST   -Y,R31
00055e 93ea      	ST   -Y,R30
00055f 9508      	RET
                 
                 _delay_ms:
000560 9610      	adiw r26,0
000561 f039      	breq __delay_ms1
                 __delay_ms0:
000562 95a8      	wdr
                +
000563 ed80     +LDI R24 , LOW ( 0x7D0 )
000564 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000565 9701     +SBIW R24 , 1
000566 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000567 9711      	sbiw r26,1
000568 f7c9      	brne __delay_ms0
                 __delay_ms1:
000569 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  26 r1 :   7 r2 :   0 r3 :   0 r4 :   2 r5 :   0 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:  10 
r16:  52 r17:  60 r18:  38 r19:  20 r20:  19 r21:  27 r22:  23 r23:  18 
r24:  41 r25:  14 r26: 136 r27:  50 r28:  27 r29:   1 r30: 271 r31:  90 
x  :  28 y  : 223 z  :  19 
Registers used: 26 out of 35 (74.3%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   5 
adiw  :  31 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  21 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  12 
brlt  :   0 brmi  :   1 brne  :  35 brpl  :   1 brsh  :   3 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  20 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   6 
cp    :   5 cpc   :   5 cpi   :  41 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   9 inc   :   3 jmp   :  23 ld    :  45 ldd   :  77 ldi   : 163 
lds   :   4 lpm   :  14 lsl   :   1 lsr   :   2 mov   :  45 movw  :  38 
mul   :   1 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   2 
ori   :  11 out   :  25 pop   :   5 push  :   5 rcall : 115 ret   :  40 
reti  :   1 rjmp  :  76 rol   :   7 ror   :   2 sbc   :   4 sbci  :  13 
sbi   :   8 sbic  :   0 sbis  :   4 sbiw  :  22 sbr   :   1 sbrc  :   2 
sbrs  :  12 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  91 std   :  45 sts   :   8 sub   :   3 subi  :  25 swap  :   1 
tst   :   6 wdr   :   1 
Instructions used: 67 out of 116 (57.8%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000ad4   2440    332   2772   32768   8.5%
[.dseg] 0x000060 0x0002e8      0    136    136    2048   6.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
